// Code generated by go-swagger; DO NOT EDIT.

package daily

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "SzerfoldAPI/models"
)

// GetDailyHandlerFunc turns a function with the right signature into a get daily handler
type GetDailyHandlerFunc func(GetDailyParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDailyHandlerFunc) Handle(params GetDailyParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetDailyHandler interface for that can handle valid get daily params
type GetDailyHandler interface {
	Handle(GetDailyParams, *models.Principal) middleware.Responder
}

// NewGetDaily creates a new http.Handler for the get daily operation
func NewGetDaily(ctx *middleware.Context, handler GetDailyHandler) *GetDaily {
	return &GetDaily{Context: ctx, Handler: handler}
}

/*GetDaily swagger:route GET / daily getDaily

GetDaily get daily API

*/
type GetDaily struct {
	Context *middleware.Context
	Handler GetDailyHandler
}

func (o *GetDaily) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDailyParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
